#:mute

#:set INT_KINDS = ['int8', 'int16', 'int32', 'int64']
#:set REAL_KINDS = ['real32', 'real64']
#:set TYPE_DICT = [(k, 'integer(kind={})'.format(k)) for k in INT_KINDS]
#:set TYPE_DICT = TYPE_DICT + [(k, 'real(kind={})'.format(k)) for k in REAL_KINDS]
#:set TYPE_DICT = dict(TYPE_DICT)
#:set type = lambda k: TYPE_DICT[k]

#:endmute
module test_util
    use, intrinsic :: iso_fortran_env, only: int8, int16, int32, int64, real32, real64
    use testdrive, only: new_unittest, unittest_type, error_type, check
    use paramcard_util
    implicit none
    private

    public :: collect_test_util

contains

    subroutine collect_test_util(testsuite)
        type(unittest_type), allocatable, intent(out) :: testsuite(:)

        testsuite = [ &
#:for k in REAL_KINDS
                    new_unittest('is_close_${k}$', test_is_close_${k}$), &
#:endfor
                    new_unittest('remove_spaces', test_remove_spaces), &
#:for k in INT_KINDS + REAL_KINDS
                    new_unittest('to_str_${k}$', test_to_str_${k}$), &
#:endfor
                    new_unittest('to_upper', test_to_upper) &
                    ]
    end subroutine collect_test_util

#:for k in REAL_KINDS
    subroutine test_is_close_${k}$ (error)
        type(error_type), allocatable, intent(out) :: error

        call check(error,.not. is_close(1.0_${k}$, 1.001_${k}$))
        if (allocated(error)) return

        call check(error, is_close(1.000_${k}$, 1.001_${k}$, 0.1_${k}$))
        if (allocated(error)) return

        call check(error, is_close(1.000_${k}$, 1.001_${k}$, 0.0_${k}$, 0.1_${k}$))
        if (allocated(error)) return
    end subroutine test_is_close_${k}$

#:endfor
    subroutine test_remove_spaces(error)
        type(error_type), allocatable, intent(out) :: error

        call check(error, remove_spaces(' a b  cd e  ') == 'abcde')
        if (allocated(error)) return

        call check(error, remove_spaces('     ') == '')
        if (allocated(error)) return
    end subroutine test_remove_spaces

#:for k in INT_KINDS + REAL_KINDS
    subroutine test_to_str_${k}$ (error)
        type(error_type), allocatable, intent(out) :: error

        character(len=:), allocatable :: s
        ${type(k)}$::x,y

#:if k in INT_KINDS
        x = 123_${k}$
        s = to_str(x)
        call check(error, s == '123')
        if (allocated(error)) return

        x = -123_${k}$
        s = to_str(x)
        read (s, *) y
        call check(error, x == y)
        if (allocated(error)) return
#:else
        x = 3
        x = 1 / x
        s = to_str(x)
        read (s, *) y
        call check(error, is_close(x, y))
        if (allocated(error)) return
#:endif
    end subroutine test_to_str_${k}$

#:endfor
    subroutine test_to_upper(error)
        type(error_type), allocatable, intent(out) :: error

        call check(error, to_upper('abC1@') == 'ABC1@')
        if (allocated(error)) return
    end subroutine test_to_upper

end module test_util

program tester
    use, intrinsic :: iso_fortran_env, only: error_unit
    use testdrive, only: run_testsuite, new_testsuite, testsuite_type
    use test_util, only: collect_test_util
    implicit none
    integer :: stat, is
    type(testsuite_type), allocatable :: testsuites(:)
    character(len=*), parameter :: fmt = '("#", *(1x, a))'

    stat = 0

    testsuites = [ &
                 new_testsuite('util', collect_test_util) &
                 ]

    do is = 1, size(testsuites)
        write (error_unit, fmt) 'Testing:', testsuites(is)%name
        call run_testsuite(testsuites(is)%collect, error_unit, stat)
    end do

    if (stat > 0) then
        write (error_unit, '(i0, 1x, a)') stat, 'test(s) failed!'
        error stop
    end if
end program tester
